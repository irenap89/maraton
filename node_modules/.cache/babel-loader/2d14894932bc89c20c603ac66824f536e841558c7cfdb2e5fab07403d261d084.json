{"ast":null,"code":"var db = require('mime-db');\n\n// types[extension] = type\nexports.types = Object.create(null);\n// extensions[type] = [extensions]\nexports.extensions = Object.create(null);\nObject.keys(db).forEach(function (name) {\n  var mime = db[name];\n  var exts = mime.extensions;\n  if (!exts || !exts.length) return;\n  exports.extensions[name] = exts;\n  exts.forEach(function (ext) {\n    exports.types[ext] = name;\n  });\n});\nexports.lookup = function (string) {\n  if (!string || typeof string !== \"string\") return false;\n  // remove any leading paths, though we should just use path.basename\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase();\n  if (!string) return false;\n  return exports.types[string] || false;\n};\nexports.extension = function (type) {\n  if (!type || typeof type !== \"string\") return false;\n  // to do: use media-typer\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/);\n  if (!type) return false;\n  var exts = exports.extensions[type[1].toLowerCase()];\n  if (!exts || !exts.length) return false;\n  return exts[0];\n};\n\n// type has to be an exact mime type\nexports.charset = function (type) {\n  var mime = db[type];\n  if (mime && mime.charset) return mime.charset;\n\n  // default text/* to utf-8\n  if (/^text\\//.test(type)) return 'UTF-8';\n  return false;\n};\n\n// backwards compatibility\nexports.charsets = {\n  lookup: exports.charset\n};\n\n// to do: maybe use set-type module or something\nexports.contentType = function (type) {\n  if (!type || typeof type !== \"string\") return false;\n  if (!~type.indexOf('/')) type = exports.lookup(type);\n  if (!type) return false;\n  if (!~type.indexOf('charset')) {\n    var charset = exports.charset(type);\n    if (charset) type += '; charset=' + charset.toLowerCase();\n  }\n  return type;\n};","map":{"version":3,"names":["db","require","exports","types","Object","create","extensions","keys","forEach","name","mime","exts","length","ext","lookup","string","replace","toLowerCase","extension","type","match","charset","test","charsets","contentType","indexOf"],"sources":["C:/Users/irena/Desktop/bg_remove/bg_remove_1/maraton/node_modules/unirest/node_modules/mime-types/index.js"],"sourcesContent":["\nvar db = require('mime-db')\n\n// types[extension] = type\nexports.types = Object.create(null)\n// extensions[type] = [extensions]\nexports.extensions = Object.create(null)\n\nObject.keys(db).forEach(function (name) {\n  var mime = db[name]\n  var exts = mime.extensions\n  if (!exts || !exts.length) return\n  exports.extensions[name] = exts\n  exts.forEach(function (ext) {\n    exports.types[ext] = name\n  })\n})\n\nexports.lookup = function (string) {\n  if (!string || typeof string !== \"string\") return false\n  // remove any leading paths, though we should just use path.basename\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase()\n  if (!string) return false\n  return exports.types[string] || false\n}\n\nexports.extension = function (type) {\n  if (!type || typeof type !== \"string\") return false\n  // to do: use media-typer\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)\n  if (!type) return false\n  var exts = exports.extensions[type[1].toLowerCase()]\n  if (!exts || !exts.length) return false\n  return exts[0]\n}\n\n// type has to be an exact mime type\nexports.charset = function (type) {\n  var mime = db[type]\n  if (mime && mime.charset) return mime.charset\n\n  // default text/* to utf-8\n  if (/^text\\//.test(type)) return 'UTF-8'\n\n  return false\n}\n\n// backwards compatibility\nexports.charsets = {\n  lookup: exports.charset\n}\n\n// to do: maybe use set-type module or something\nexports.contentType = function (type) {\n  if (!type || typeof type !== \"string\") return false\n  if (!~type.indexOf('/')) type = exports.lookup(type)\n  if (!type) return false\n  if (!~type.indexOf('charset')) {\n    var charset = exports.charset(type)\n    if (charset) type += '; charset=' + charset.toLowerCase()\n  }\n  return type\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}